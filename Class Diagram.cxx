/* generated by dia/codegen.py */
/*This subclass grid can rotate its contents, then change gravity so that they fall down in a different direction.*/
class GravityGrid : Grid 
{
public:
	void setGravity (direction bottom_is);
	GravityGrid (T t,
	             int x,
	             int y);
};

/*Abstract base class to allow things to move and collide.*/
class Movable : Entity 
{
public:
	sf::Vector2<float> getVelocity ();
	void setVelocity (const sf::Vector2<float> &new_velocity);
	sf::Vector2<float> getAcceleration ();
	void setAcceleration (const sf::Vector2<float> &new_acceleration);
	void move ();
protected:
	sf::Vector2<float> velocity;
	sf::Vector2<float> acceleration;
};

class ScoreDisplay 
{
public:
	sf::String* getScoreGraphic ();
private:
	std::string getScoreString ();
	sf::String scoreGraphic;
	std::stringstream scoreConverter;
};

/*Used for the actual drawing.  Abstract base class.*/
class Entity 
{
public:
	sf::Sprite* getSprite ();
	void setPosition (int x,
	                  int y);
	void setPosition (sf::Vector2i new_position);
	sf::Vector2i getPosition ();
protected:
	sf::Image image;
	sf::Sprite sprite;
	sf::Vector2<int> position;
};

/*Keeps track of the game's score and state.*/
class GameWindow : sf::RenderWindow 
{
public:
	int getScore ();
	void setScore (int new_score);
	void takeScreenshot ();
	void toggleFullScreen ();
	friend class ScoreDisplay;
private:
	int score;
	bool is_fullscreen;
};

/*Starts the game when clicked.  When this happens, it's destroyed and replaced with the score display.*/
class StartButton : ButtonEntity 
{
public:
	~StartButton ();
};

/*Holds blocks.  Design this to be useful in many projects!*/
class Grid 
{
public:
	Grid (sf::Vector2<int> new_grid_size,
	      sf::Vector2<int> new_cell_size,
	      sf::Vector2<int> new_position);
	void set (T t,
	          sf::Vector2<int> location);
	T get (sf::Vector2<int> location);
	sf::Vector2<int> getSize ();
	void setSize (sf::Vector2<int> new_size);
	bool isValid (sf::Vector2<int> this_position);
	sf::Vector2<int> getPosition ();
	sf::Rect<int> getRect (sf::Vector2<int> cell);
	sf::Rect<int> getRect ();
	enum class Direction : char {EAST = 0, NORTH, WEST, SOUTH};
	 ;
protected:
	sf::Vector2i size;
	T** objects;
	sf::Vector2<int> position;
	sf::Vector2<int> cellsize;
};

/*Abstract class to allow for things to be clicked.*/
class Clickable : Entity 
{
public:
	void handleInput (sf::Input input);
	void setClickable (bool newClickable);
	bool isClickable ();
protected:
	bool clickable;
};

/*Abstract class used to set up buttons.*/
class ButtonEntity : Clickable 
{
};

class Block : Movable, Clickable 
{
public:
	Block (sf::Color new_color);
	bool anyAdjacent ();
	*Block getAdjacentBlock (direction the_dir);
	void destroy ();
	void setClickable (bool new_clickable);
	bool isSameColor (const Block &other_block);
	void setGridPosition (sf::Vector2<int> newPosition);
private:
	sf::Color color;
	bool moving;
	bool isdestroyed;
	bool clickable;
};

/*See SFML documentation.*/
class sf::RenderWindow 
{
};

